class CycleIterator:
    def __init__(self, data):
        self.data = data
        self.index = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.index >= len(self.data):
            self.index = 0
        result = self.data[self.index]
        self.index += 1
        return result
    
# Создаем итератор
iterator = CycleIterator([1, 2, 3])

# Циклично проходим по элементам
for _ in range(7):
    print(next(iterator))


# Конструктор __init__:
# Сохраняет переданный список в переменную data.
# Устанавливает индекс текущего элемента в index, изначально равный 0.

# Метод __iter__:
# Возвращает сам объект, делая его итератором.

# Метод __next__:
# Проверяет, достиг ли текущий индекс конца списка. Если да, сбрасывает индекс обратно на начало списка.
# Возвращает текущий элемент списка и увеличивает индекс на единицу.

# Оператор % используется для получения остатка от целочисленного деления.
# Ещё он применяется для обеспечения корректного индексации элементов, когда индекс выходит за пределы допустимого диапазона.
# Например, если длина списка равна 5, а индекс равен 7, то 7 % 5 даст 2, что означает доступ ко второму элементу списка.
# Такой подход позволяет осуществлять циклический проход по элементам списка.
# Т.е. можно переделать метод __next__:
    # def __next__(self):
    #    result = self.data[self.index % len(self.data)]
    #    self.index += 1
    #    return result